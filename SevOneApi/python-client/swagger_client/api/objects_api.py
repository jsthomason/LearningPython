# coding: utf-8

"""
    SevOne API Documentation

    Supported endpoints by the new RESTful API  # noqa: E501

    OpenAPI spec version: 2.1.18, Hash: db562e6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ObjectsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_object(self, device_id, object, **kwargs):  # noqa: E501
        """Create object  # noqa: E501

        Creates a new object for a specific device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_object(device_id, object, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: The id of the device (required)
        :param DeviceObjectRequestDto object: Object that will be created (required)
        :return: DeviceObjectDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_object_with_http_info(device_id, object, **kwargs)  # noqa: E501
        else:
            (data) = self.create_object_with_http_info(device_id, object, **kwargs)  # noqa: E501
            return data

    def create_object_with_http_info(self, device_id, object, **kwargs):  # noqa: E501
        """Create object  # noqa: E501

        Creates a new object for a specific device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_object_with_http_info(device_id, object, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: The id of the device (required)
        :param DeviceObjectRequestDto object: Object that will be created (required)
        :return: DeviceObjectDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'object']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `create_object`")  # noqa: E501
        # verify the required parameter 'object' is set
        if ('object' not in params or
                params['object'] is None):
            raise ValueError("Missing the required parameter `object` when calling `create_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'object' in params:
            body_params = params['object']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/devices/{deviceId}/objects', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceObjectDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_object1(self, device_id, object, **kwargs):  # noqa: E501
        """Create object  # noqa: E501

        Creates a new object for a specific device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_object1(device_id, object, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: The id of the device (required)
        :param DeviceObjectRequestDto object: Object that will be created (required)
        :return: DeviceObjectDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_object1_with_http_info(device_id, object, **kwargs)  # noqa: E501
        else:
            (data) = self.create_object1_with_http_info(device_id, object, **kwargs)  # noqa: E501
            return data

    def create_object1_with_http_info(self, device_id, object, **kwargs):  # noqa: E501
        """Create object  # noqa: E501

        Creates a new object for a specific device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_object1_with_http_info(device_id, object, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: The id of the device (required)
        :param DeviceObjectRequestDto object: Object that will be created (required)
        :return: DeviceObjectDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'object']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_object1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `create_object1`")  # noqa: E501
        # verify the required parameter 'object' is set
        if ('object' not in params or
                params['object'] is None):
            raise ValueError("Missing the required parameter `object` when calling `create_object1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'object' in params:
            body_params = params['object']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/devices/{deviceId}/objects', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceObjectDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_object_by_id(self, device_id, id, **kwargs):  # noqa: E501
        """Delete object  # noqa: E501

        Deletes an existing object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_object_by_id(device_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: The id of the device this object belongs to (required)
        :param int id: The id of the object to be deleted (required)
        :return: ResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_object_by_id_with_http_info(device_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_object_by_id_with_http_info(device_id, id, **kwargs)  # noqa: E501
            return data

    def delete_object_by_id_with_http_info(self, device_id, id, **kwargs):  # noqa: E501
        """Delete object  # noqa: E501

        Deletes an existing object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_object_by_id_with_http_info(device_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: The id of the device this object belongs to (required)
        :param int id: The id of the object to be deleted (required)
        :return: ResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_object_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `delete_object_by_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_object_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/devices/{deviceId}/objects/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseEntity',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_object_by_id1(self, device_id, id, **kwargs):  # noqa: E501
        """Delete object  # noqa: E501

        Deletes an existing object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_object_by_id1(device_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: The id of the device this object belongs to (required)
        :param int id: The id of the object to be deleted (required)
        :return: ResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_object_by_id1_with_http_info(device_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_object_by_id1_with_http_info(device_id, id, **kwargs)  # noqa: E501
            return data

    def delete_object_by_id1_with_http_info(self, device_id, id, **kwargs):  # noqa: E501
        """Delete object  # noqa: E501

        Deletes an existing object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_object_by_id1_with_http_info(device_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: The id of the device this object belongs to (required)
        :param int id: The id of the object to be deleted (required)
        :return: ResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_object_by_id1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `delete_object_by_id1`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_object_by_id1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/devices/{deviceId}/objects/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseEntity',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def filter_objects(self, object_filter, **kwargs):  # noqa: E501
        """Find objects  # noqa: E501

        Filter the entire object collection with provided filter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.filter_objects(object_filter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ObjectFilter object_filter: ObjectFilter will be used for applying filtering to the set of objects. (required)
        :param bool include_indicators: Determines whether to include indicators or not
        :param bool include_extended_info: Determines whether to include extendedInfo or not
        :param bool local_only: Determines whether to execute distributed request or not
        :return: list[DeviceObjectDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.filter_objects_with_http_info(object_filter, **kwargs)  # noqa: E501
        else:
            (data) = self.filter_objects_with_http_info(object_filter, **kwargs)  # noqa: E501
            return data

    def filter_objects_with_http_info(self, object_filter, **kwargs):  # noqa: E501
        """Find objects  # noqa: E501

        Filter the entire object collection with provided filter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.filter_objects_with_http_info(object_filter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ObjectFilter object_filter: ObjectFilter will be used for applying filtering to the set of objects. (required)
        :param bool include_indicators: Determines whether to include indicators or not
        :param bool include_extended_info: Determines whether to include extendedInfo or not
        :param bool local_only: Determines whether to execute distributed request or not
        :return: list[DeviceObjectDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_filter', 'include_indicators', 'include_extended_info', 'local_only']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method filter_objects" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_filter' is set
        if ('object_filter' not in params or
                params['object_filter'] is None):
            raise ValueError("Missing the required parameter `object_filter` when calling `filter_objects`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'include_indicators' in params:
            query_params.append(('includeIndicators', params['include_indicators']))  # noqa: E501
        if 'include_extended_info' in params:
            query_params.append(('includeExtendedInfo', params['include_extended_info']))  # noqa: E501
        if 'local_only' in params:
            query_params.append(('localOnly', params['local_only']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'object_filter' in params:
            body_params = params['object_filter']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/devices/objects/filter', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DeviceObjectDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def filter_objects1(self, object_filter, **kwargs):  # noqa: E501
        """Find objects  # noqa: E501

        Filter the entire object collection with provided filter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.filter_objects1(object_filter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ObjectFilter object_filter: ObjectFilter will be used for applying filtering to the set of objects. (required)
        :param bool include_indicators: Determines whether to include indicators or not
        :param bool include_extended_info: Determines whether to include extendedInfo or not
        :param int page: The number of the requested page, defaults to 0
        :param int size: The size of the requested page, defaults to 20; limited to a configurable maximum (10000 by default)
        :param bool include_count: Whether to query for total elements count; defaults to true, set to false for performance boost
        :param str sort_by: String array of format \"parameter, -parameter, natural\\*parameter, -natural\\*parameter\", where minus is for descending, natural* is for natural sort
        :param str fields: String array of format \"id,name,objects(id,pluginId)\"; Defines which fields are returned 
        :return: PagerDeviceObjectDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.filter_objects1_with_http_info(object_filter, **kwargs)  # noqa: E501
        else:
            (data) = self.filter_objects1_with_http_info(object_filter, **kwargs)  # noqa: E501
            return data

    def filter_objects1_with_http_info(self, object_filter, **kwargs):  # noqa: E501
        """Find objects  # noqa: E501

        Filter the entire object collection with provided filter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.filter_objects1_with_http_info(object_filter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ObjectFilter object_filter: ObjectFilter will be used for applying filtering to the set of objects. (required)
        :param bool include_indicators: Determines whether to include indicators or not
        :param bool include_extended_info: Determines whether to include extendedInfo or not
        :param int page: The number of the requested page, defaults to 0
        :param int size: The size of the requested page, defaults to 20; limited to a configurable maximum (10000 by default)
        :param bool include_count: Whether to query for total elements count; defaults to true, set to false for performance boost
        :param str sort_by: String array of format \"parameter, -parameter, natural\\*parameter, -natural\\*parameter\", where minus is for descending, natural* is for natural sort
        :param str fields: String array of format \"id,name,objects(id,pluginId)\"; Defines which fields are returned 
        :return: PagerDeviceObjectDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_filter', 'include_indicators', 'include_extended_info', 'page', 'size', 'include_count', 'sort_by', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method filter_objects1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_filter' is set
        if ('object_filter' not in params or
                params['object_filter'] is None):
            raise ValueError("Missing the required parameter `object_filter` when calling `filter_objects1`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'include_indicators' in params:
            query_params.append(('includeIndicators', params['include_indicators']))  # noqa: E501
        if 'include_extended_info' in params:
            query_params.append(('includeExtendedInfo', params['include_extended_info']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'include_count' in params:
            query_params.append(('includeCount', params['include_count']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sortBy', params['sort_by']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'object_filter' in params:
            body_params = params['object_filter']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/devices/objects/filter', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagerDeviceObjectDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_object_by_id(self, device_id, id, **kwargs):  # noqa: E501
        """Get object by Id  # noqa: E501

        Gets a single object object by provided Id if it exists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_object_by_id(device_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: The id of the device this object belongs to (required)
        :param int id: The id of the object (required)
        :param bool include_indicators: Determines whether to include indicators
        :param bool include_extended_info: Determines whether to include extendedInfo or not
        :return: DeviceObjectDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_object_by_id_with_http_info(device_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_object_by_id_with_http_info(device_id, id, **kwargs)  # noqa: E501
            return data

    def get_object_by_id_with_http_info(self, device_id, id, **kwargs):  # noqa: E501
        """Get object by Id  # noqa: E501

        Gets a single object object by provided Id if it exists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_object_by_id_with_http_info(device_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: The id of the device this object belongs to (required)
        :param int id: The id of the object (required)
        :param bool include_indicators: Determines whether to include indicators
        :param bool include_extended_info: Determines whether to include extendedInfo or not
        :return: DeviceObjectDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'id', 'include_indicators', 'include_extended_info']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_object_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `get_object_by_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_object_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'include_indicators' in params:
            query_params.append(('includeIndicators', params['include_indicators']))  # noqa: E501
        if 'include_extended_info' in params:
            query_params.append(('includeExtendedInfo', params['include_extended_info']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/devices/{deviceId}/objects/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceObjectDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_object_by_id1(self, device_id, id, **kwargs):  # noqa: E501
        """Get object by Id  # noqa: E501

        Gets a single object object by provided Id if it exists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_object_by_id1(device_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: The id of the device this object belongs to (required)
        :param int id: The id of the object (required)
        :param bool include_indicators: Determines whether to include indicators
        :param bool include_indicator_metadata: Determines whether to include indicator metadata
        :param bool include_extended_info: Determines whether to include extendedInfo or not
        :return: DeviceObjectDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_object_by_id1_with_http_info(device_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_object_by_id1_with_http_info(device_id, id, **kwargs)  # noqa: E501
            return data

    def get_object_by_id1_with_http_info(self, device_id, id, **kwargs):  # noqa: E501
        """Get object by Id  # noqa: E501

        Gets a single object object by provided Id if it exists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_object_by_id1_with_http_info(device_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: The id of the device this object belongs to (required)
        :param int id: The id of the object (required)
        :param bool include_indicators: Determines whether to include indicators
        :param bool include_indicator_metadata: Determines whether to include indicator metadata
        :param bool include_extended_info: Determines whether to include extendedInfo or not
        :return: DeviceObjectDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'id', 'include_indicators', 'include_indicator_metadata', 'include_extended_info']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_object_by_id1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `get_object_by_id1`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_object_by_id1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'include_indicators' in params:
            query_params.append(('includeIndicators', params['include_indicators']))  # noqa: E501
        if 'include_indicator_metadata' in params:
            query_params.append(('includeIndicatorMetadata', params['include_indicator_metadata']))  # noqa: E501
        if 'include_extended_info' in params:
            query_params.append(('includeExtendedInfo', params['include_extended_info']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/devices/{deviceId}/objects/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceObjectDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_objects(self, device_id, **kwargs):  # noqa: E501
        """Get all objects for a device  # noqa: E501

        Endpoint for retrieving all objects for a specific device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_objects(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: The id of the device (required)
        :param int page: The number of the requested page, defaults to 0
        :param int size: The size of the requested page, defaults to 20; limited to a configurable maximum (10000 by default)
        :param bool include_indicators: Determines whether to include indicators
        :param bool include_extended_info: Determines whether to include extendedInfo or not
        :return: PagerDeviceObjectDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_objects_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_objects_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def get_objects_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """Get all objects for a device  # noqa: E501

        Endpoint for retrieving all objects for a specific device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_objects_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: The id of the device (required)
        :param int page: The number of the requested page, defaults to 0
        :param int size: The size of the requested page, defaults to 20; limited to a configurable maximum (10000 by default)
        :param bool include_indicators: Determines whether to include indicators
        :param bool include_extended_info: Determines whether to include extendedInfo or not
        :return: PagerDeviceObjectDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'page', 'size', 'include_indicators', 'include_extended_info']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_objects" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `get_objects`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'include_indicators' in params:
            query_params.append(('includeIndicators', params['include_indicators']))  # noqa: E501
        if 'include_extended_info' in params:
            query_params.append(('includeExtendedInfo', params['include_extended_info']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/devices/{deviceId}/objects', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagerDeviceObjectDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_objects1(self, device_id, **kwargs):  # noqa: E501
        """Get all objects for a device  # noqa: E501

        Endpoint for retrieving all objects for a specific device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_objects1(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: The id of the device (required)
        :param bool include_indicators: Determines whether to include indicators
        :param bool include_indicator_metadata: Determines whether to include indicator metadata
        :param bool include_extended_info: Determines whether to include extendedInfo or not
        :param int page: The number of the requested page, defaults to 0
        :param int size: The size of the requested page, defaults to 20; limited to a configurable maximum (10000 by default)
        :param bool include_count: Whether to query for total elements count; defaults to true, set to false for performance boost
        :param str sort_by: String array of format \"parameter, -parameter, natural\\*parameter, -natural\\*parameter\", where minus is for descending, natural* is for natural sort
        :param str fields: String array of format \"id,name,objects(id,pluginId)\"; Defines which fields are returned 
        :return: PagerDeviceObjectDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_objects1_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_objects1_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def get_objects1_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """Get all objects for a device  # noqa: E501

        Endpoint for retrieving all objects for a specific device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_objects1_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: The id of the device (required)
        :param bool include_indicators: Determines whether to include indicators
        :param bool include_indicator_metadata: Determines whether to include indicator metadata
        :param bool include_extended_info: Determines whether to include extendedInfo or not
        :param int page: The number of the requested page, defaults to 0
        :param int size: The size of the requested page, defaults to 20; limited to a configurable maximum (10000 by default)
        :param bool include_count: Whether to query for total elements count; defaults to true, set to false for performance boost
        :param str sort_by: String array of format \"parameter, -parameter, natural\\*parameter, -natural\\*parameter\", where minus is for descending, natural* is for natural sort
        :param str fields: String array of format \"id,name,objects(id,pluginId)\"; Defines which fields are returned 
        :return: PagerDeviceObjectDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'include_indicators', 'include_indicator_metadata', 'include_extended_info', 'page', 'size', 'include_count', 'sort_by', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_objects1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `get_objects1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []
        if 'include_indicators' in params:
            query_params.append(('includeIndicators', params['include_indicators']))  # noqa: E501
        if 'include_indicator_metadata' in params:
            query_params.append(('includeIndicatorMetadata', params['include_indicator_metadata']))  # noqa: E501
        if 'include_extended_info' in params:
            query_params.append(('includeExtendedInfo', params['include_extended_info']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'include_count' in params:
            query_params.append(('includeCount', params['include_count']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sortBy', params['sort_by']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/devices/{deviceId}/objects', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagerDeviceObjectDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def partially_update_object_by_id(self, device_id, id, object, **kwargs):  # noqa: E501
        """Partially update object  # noqa: E501

        Partially updates an existing object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.partially_update_object_by_id(device_id, id, object, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: The id of the device this object belongs to (required)
        :param int id: The id of the object to be updated (required)
        :param DeviceObjectUpdateRequestDto object: Object to be updated (required)
        :return: DeviceObjectDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.partially_update_object_by_id_with_http_info(device_id, id, object, **kwargs)  # noqa: E501
        else:
            (data) = self.partially_update_object_by_id_with_http_info(device_id, id, object, **kwargs)  # noqa: E501
            return data

    def partially_update_object_by_id_with_http_info(self, device_id, id, object, **kwargs):  # noqa: E501
        """Partially update object  # noqa: E501

        Partially updates an existing object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.partially_update_object_by_id_with_http_info(device_id, id, object, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: The id of the device this object belongs to (required)
        :param int id: The id of the object to be updated (required)
        :param DeviceObjectUpdateRequestDto object: Object to be updated (required)
        :return: DeviceObjectDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'id', 'object']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method partially_update_object_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `partially_update_object_by_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `partially_update_object_by_id`")  # noqa: E501
        # verify the required parameter 'object' is set
        if ('object' not in params or
                params['object'] is None):
            raise ValueError("Missing the required parameter `object` when calling `partially_update_object_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'object' in params:
            body_params = params['object']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/devices/{deviceId}/objects/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceObjectDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def partially_update_object_by_id1(self, device_id, id, object, **kwargs):  # noqa: E501
        """Partially update object  # noqa: E501

        Partially updates an existing object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.partially_update_object_by_id1(device_id, id, object, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: The id of the device this object belongs to (required)
        :param int id: The id of the object to be updated (required)
        :param DeviceObjectUpdateRequestDto object: Object to be updated (required)
        :return: DeviceObjectDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.partially_update_object_by_id1_with_http_info(device_id, id, object, **kwargs)  # noqa: E501
        else:
            (data) = self.partially_update_object_by_id1_with_http_info(device_id, id, object, **kwargs)  # noqa: E501
            return data

    def partially_update_object_by_id1_with_http_info(self, device_id, id, object, **kwargs):  # noqa: E501
        """Partially update object  # noqa: E501

        Partially updates an existing object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.partially_update_object_by_id1_with_http_info(device_id, id, object, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: The id of the device this object belongs to (required)
        :param int id: The id of the object to be updated (required)
        :param DeviceObjectUpdateRequestDto object: Object to be updated (required)
        :return: DeviceObjectDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'id', 'object']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method partially_update_object_by_id1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `partially_update_object_by_id1`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `partially_update_object_by_id1`")  # noqa: E501
        # verify the required parameter 'object' is set
        if ('object' not in params or
                params['object'] is None):
            raise ValueError("Missing the required parameter `object` when calling `partially_update_object_by_id1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'object' in params:
            body_params = params['object']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/devices/{deviceId}/objects/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceObjectDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_object_by_id(self, device_id, id, object, **kwargs):  # noqa: E501
        """Update object  # noqa: E501

        Updates an existing object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_object_by_id(device_id, id, object, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: The id of the device this object belongs to (required)
        :param int id: The id of the object to be updated (required)
        :param DeviceObjectUpdateRequestDto object: DeviceObjectDto to be updated (required)
        :return: DeviceObjectDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_object_by_id_with_http_info(device_id, id, object, **kwargs)  # noqa: E501
        else:
            (data) = self.update_object_by_id_with_http_info(device_id, id, object, **kwargs)  # noqa: E501
            return data

    def update_object_by_id_with_http_info(self, device_id, id, object, **kwargs):  # noqa: E501
        """Update object  # noqa: E501

        Updates an existing object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_object_by_id_with_http_info(device_id, id, object, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: The id of the device this object belongs to (required)
        :param int id: The id of the object to be updated (required)
        :param DeviceObjectUpdateRequestDto object: DeviceObjectDto to be updated (required)
        :return: DeviceObjectDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'id', 'object']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_object_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `update_object_by_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_object_by_id`")  # noqa: E501
        # verify the required parameter 'object' is set
        if ('object' not in params or
                params['object'] is None):
            raise ValueError("Missing the required parameter `object` when calling `update_object_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'object' in params:
            body_params = params['object']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/devices/{deviceId}/objects/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceObjectDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_object_by_id1(self, device_id, id, object, **kwargs):  # noqa: E501
        """Update object  # noqa: E501

        Updates an existing object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_object_by_id1(device_id, id, object, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: The id of the device this object belongs to (required)
        :param int id: The id of the object to be updated (required)
        :param DeviceObjectUpdateRequestDto object: DeviceObjectDto to be updated (required)
        :return: DeviceObjectDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_object_by_id1_with_http_info(device_id, id, object, **kwargs)  # noqa: E501
        else:
            (data) = self.update_object_by_id1_with_http_info(device_id, id, object, **kwargs)  # noqa: E501
            return data

    def update_object_by_id1_with_http_info(self, device_id, id, object, **kwargs):  # noqa: E501
        """Update object  # noqa: E501

        Updates an existing object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_object_by_id1_with_http_info(device_id, id, object, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: The id of the device this object belongs to (required)
        :param int id: The id of the object to be updated (required)
        :param DeviceObjectUpdateRequestDto object: DeviceObjectDto to be updated (required)
        :return: DeviceObjectDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'id', 'object']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_object_by_id1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `update_object_by_id1`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_object_by_id1`")  # noqa: E501
        # verify the required parameter 'object' is set
        if ('object' not in params or
                params['object'] is None):
            raise ValueError("Missing the required parameter `object` when calling `update_object_by_id1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'object' in params:
            body_params = params['object']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/devices/{deviceId}/objects/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceObjectDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
