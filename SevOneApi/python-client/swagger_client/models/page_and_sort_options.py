# coding: utf-8

"""
    SevOne API Documentation

    Supported endpoints by the new RESTful API  # noqa: E501

    OpenAPI spec version: 2.1.18, Hash: db562e6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PageAndSortOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'exclude': 'list[str]',
        'fields': 'str',
        'include_count': 'bool',
        'page': 'int',
        'page_or_default': 'int',
        'resolved_fields': 'dict(str, list[str])',
        'size': 'int',
        'size_or_default': 'int',
        'sort_by': 'str'
    }

    attribute_map = {
        'exclude': 'exclude',
        'fields': 'fields',
        'include_count': 'includeCount',
        'page': 'page',
        'page_or_default': 'pageOrDefault',
        'resolved_fields': 'resolvedFields',
        'size': 'size',
        'size_or_default': 'sizeOrDefault',
        'sort_by': 'sortBy'
    }

    def __init__(self, exclude=None, fields=None, include_count=None, page=None, page_or_default=None, resolved_fields=None, size=None, size_or_default=None, sort_by=None):  # noqa: E501
        """PageAndSortOptions - a model defined in Swagger"""  # noqa: E501

        self._exclude = None
        self._fields = None
        self._include_count = None
        self._page = None
        self._page_or_default = None
        self._resolved_fields = None
        self._size = None
        self._size_or_default = None
        self._sort_by = None
        self.discriminator = None

        if exclude is not None:
            self.exclude = exclude
        if fields is not None:
            self.fields = fields
        if include_count is not None:
            self.include_count = include_count
        if page is not None:
            self.page = page
        if page_or_default is not None:
            self.page_or_default = page_or_default
        if resolved_fields is not None:
            self.resolved_fields = resolved_fields
        if size is not None:
            self.size = size
        if size_or_default is not None:
            self.size_or_default = size_or_default
        if sort_by is not None:
            self.sort_by = sort_by

    @property
    def exclude(self):
        """Gets the exclude of this PageAndSortOptions.  # noqa: E501


        :return: The exclude of this PageAndSortOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._exclude

    @exclude.setter
    def exclude(self, exclude):
        """Sets the exclude of this PageAndSortOptions.


        :param exclude: The exclude of this PageAndSortOptions.  # noqa: E501
        :type: list[str]
        """

        self._exclude = exclude

    @property
    def fields(self):
        """Gets the fields of this PageAndSortOptions.  # noqa: E501


        :return: The fields of this PageAndSortOptions.  # noqa: E501
        :rtype: str
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this PageAndSortOptions.


        :param fields: The fields of this PageAndSortOptions.  # noqa: E501
        :type: str
        """

        self._fields = fields

    @property
    def include_count(self):
        """Gets the include_count of this PageAndSortOptions.  # noqa: E501


        :return: The include_count of this PageAndSortOptions.  # noqa: E501
        :rtype: bool
        """
        return self._include_count

    @include_count.setter
    def include_count(self, include_count):
        """Sets the include_count of this PageAndSortOptions.


        :param include_count: The include_count of this PageAndSortOptions.  # noqa: E501
        :type: bool
        """

        self._include_count = include_count

    @property
    def page(self):
        """Gets the page of this PageAndSortOptions.  # noqa: E501


        :return: The page of this PageAndSortOptions.  # noqa: E501
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this PageAndSortOptions.


        :param page: The page of this PageAndSortOptions.  # noqa: E501
        :type: int
        """

        self._page = page

    @property
    def page_or_default(self):
        """Gets the page_or_default of this PageAndSortOptions.  # noqa: E501


        :return: The page_or_default of this PageAndSortOptions.  # noqa: E501
        :rtype: int
        """
        return self._page_or_default

    @page_or_default.setter
    def page_or_default(self, page_or_default):
        """Sets the page_or_default of this PageAndSortOptions.


        :param page_or_default: The page_or_default of this PageAndSortOptions.  # noqa: E501
        :type: int
        """

        self._page_or_default = page_or_default

    @property
    def resolved_fields(self):
        """Gets the resolved_fields of this PageAndSortOptions.  # noqa: E501


        :return: The resolved_fields of this PageAndSortOptions.  # noqa: E501
        :rtype: dict(str, list[str])
        """
        return self._resolved_fields

    @resolved_fields.setter
    def resolved_fields(self, resolved_fields):
        """Sets the resolved_fields of this PageAndSortOptions.


        :param resolved_fields: The resolved_fields of this PageAndSortOptions.  # noqa: E501
        :type: dict(str, list[str])
        """

        self._resolved_fields = resolved_fields

    @property
    def size(self):
        """Gets the size of this PageAndSortOptions.  # noqa: E501


        :return: The size of this PageAndSortOptions.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this PageAndSortOptions.


        :param size: The size of this PageAndSortOptions.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def size_or_default(self):
        """Gets the size_or_default of this PageAndSortOptions.  # noqa: E501


        :return: The size_or_default of this PageAndSortOptions.  # noqa: E501
        :rtype: int
        """
        return self._size_or_default

    @size_or_default.setter
    def size_or_default(self, size_or_default):
        """Sets the size_or_default of this PageAndSortOptions.


        :param size_or_default: The size_or_default of this PageAndSortOptions.  # noqa: E501
        :type: int
        """

        self._size_or_default = size_or_default

    @property
    def sort_by(self):
        """Gets the sort_by of this PageAndSortOptions.  # noqa: E501


        :return: The sort_by of this PageAndSortOptions.  # noqa: E501
        :rtype: str
        """
        return self._sort_by

    @sort_by.setter
    def sort_by(self, sort_by):
        """Sets the sort_by of this PageAndSortOptions.


        :param sort_by: The sort_by of this PageAndSortOptions.  # noqa: E501
        :type: str
        """

        self._sort_by = sort_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PageAndSortOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PageAndSortOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
