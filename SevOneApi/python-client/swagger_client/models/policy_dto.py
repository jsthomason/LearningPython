# coding: utf-8

"""
    SevOne API Documentation

    Supported endpoints by the new RESTful API  # noqa: E501

    OpenAPI spec version: 2.1.18, Hash: db562e6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PolicyDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'group_id': 'int',
        'id': 'int',
        'is_device_group': 'bool',
        'name': 'str'
    }

    attribute_map = {
        'description': 'description',
        'group_id': 'groupId',
        'id': 'id',
        'is_device_group': 'isDeviceGroup',
        'name': 'name'
    }

    def __init__(self, description=None, group_id=None, id=None, is_device_group=None, name=None):  # noqa: E501
        """PolicyDto - a model defined in Swagger"""  # noqa: E501

        self._description = None
        self._group_id = None
        self._id = None
        self._is_device_group = None
        self._name = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if group_id is not None:
            self.group_id = group_id
        if id is not None:
            self.id = id
        if is_device_group is not None:
            self.is_device_group = is_device_group
        if name is not None:
            self.name = name

    @property
    def description(self):
        """Gets the description of this PolicyDto.  # noqa: E501


        :return: The description of this PolicyDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PolicyDto.


        :param description: The description of this PolicyDto.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def group_id(self):
        """Gets the group_id of this PolicyDto.  # noqa: E501


        :return: The group_id of this PolicyDto.  # noqa: E501
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this PolicyDto.


        :param group_id: The group_id of this PolicyDto.  # noqa: E501
        :type: int
        """

        self._group_id = group_id

    @property
    def id(self):
        """Gets the id of this PolicyDto.  # noqa: E501


        :return: The id of this PolicyDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PolicyDto.


        :param id: The id of this PolicyDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def is_device_group(self):
        """Gets the is_device_group of this PolicyDto.  # noqa: E501


        :return: The is_device_group of this PolicyDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_device_group

    @is_device_group.setter
    def is_device_group(self, is_device_group):
        """Sets the is_device_group of this PolicyDto.


        :param is_device_group: The is_device_group of this PolicyDto.  # noqa: E501
        :type: bool
        """

        self._is_device_group = is_device_group

    @property
    def name(self):
        """Gets the name of this PolicyDto.  # noqa: E501


        :return: The name of this PolicyDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PolicyDto.


        :param name: The name of this PolicyDto.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PolicyDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PolicyDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
