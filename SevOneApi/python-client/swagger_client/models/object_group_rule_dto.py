# coding: utf-8

"""
    SevOne API Documentation

    Supported endpoints by the new RESTful API  # noqa: E501

    OpenAPI spec version: 2.1.18, Hash: db562e6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ObjectGroupRuleDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description_expression': 'str',
        'device_group': 'int',
        'device_type': 'int',
        'group_id': 'int',
        'id': 'int',
        'name_expression': 'str',
        'object_type_id': 'int',
        'plugin_id': 'int',
        'subtype_id': 'int'
    }

    attribute_map = {
        'description_expression': 'descriptionExpression',
        'device_group': 'deviceGroup',
        'device_type': 'deviceType',
        'group_id': 'groupId',
        'id': 'id',
        'name_expression': 'nameExpression',
        'object_type_id': 'objectTypeId',
        'plugin_id': 'pluginId',
        'subtype_id': 'subtypeId'
    }

    def __init__(self, description_expression=None, device_group=None, device_type=None, group_id=None, id=None, name_expression=None, object_type_id=None, plugin_id=None, subtype_id=None):  # noqa: E501
        """ObjectGroupRuleDto - a model defined in Swagger"""  # noqa: E501

        self._description_expression = None
        self._device_group = None
        self._device_type = None
        self._group_id = None
        self._id = None
        self._name_expression = None
        self._object_type_id = None
        self._plugin_id = None
        self._subtype_id = None
        self.discriminator = None

        if description_expression is not None:
            self.description_expression = description_expression
        if device_group is not None:
            self.device_group = device_group
        if device_type is not None:
            self.device_type = device_type
        if group_id is not None:
            self.group_id = group_id
        if id is not None:
            self.id = id
        if name_expression is not None:
            self.name_expression = name_expression
        if object_type_id is not None:
            self.object_type_id = object_type_id
        if plugin_id is not None:
            self.plugin_id = plugin_id
        if subtype_id is not None:
            self.subtype_id = subtype_id

    @property
    def description_expression(self):
        """Gets the description_expression of this ObjectGroupRuleDto.  # noqa: E501


        :return: The description_expression of this ObjectGroupRuleDto.  # noqa: E501
        :rtype: str
        """
        return self._description_expression

    @description_expression.setter
    def description_expression(self, description_expression):
        """Sets the description_expression of this ObjectGroupRuleDto.


        :param description_expression: The description_expression of this ObjectGroupRuleDto.  # noqa: E501
        :type: str
        """

        self._description_expression = description_expression

    @property
    def device_group(self):
        """Gets the device_group of this ObjectGroupRuleDto.  # noqa: E501


        :return: The device_group of this ObjectGroupRuleDto.  # noqa: E501
        :rtype: int
        """
        return self._device_group

    @device_group.setter
    def device_group(self, device_group):
        """Sets the device_group of this ObjectGroupRuleDto.


        :param device_group: The device_group of this ObjectGroupRuleDto.  # noqa: E501
        :type: int
        """

        self._device_group = device_group

    @property
    def device_type(self):
        """Gets the device_type of this ObjectGroupRuleDto.  # noqa: E501


        :return: The device_type of this ObjectGroupRuleDto.  # noqa: E501
        :rtype: int
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this ObjectGroupRuleDto.


        :param device_type: The device_type of this ObjectGroupRuleDto.  # noqa: E501
        :type: int
        """

        self._device_type = device_type

    @property
    def group_id(self):
        """Gets the group_id of this ObjectGroupRuleDto.  # noqa: E501


        :return: The group_id of this ObjectGroupRuleDto.  # noqa: E501
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this ObjectGroupRuleDto.


        :param group_id: The group_id of this ObjectGroupRuleDto.  # noqa: E501
        :type: int
        """

        self._group_id = group_id

    @property
    def id(self):
        """Gets the id of this ObjectGroupRuleDto.  # noqa: E501


        :return: The id of this ObjectGroupRuleDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ObjectGroupRuleDto.


        :param id: The id of this ObjectGroupRuleDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name_expression(self):
        """Gets the name_expression of this ObjectGroupRuleDto.  # noqa: E501


        :return: The name_expression of this ObjectGroupRuleDto.  # noqa: E501
        :rtype: str
        """
        return self._name_expression

    @name_expression.setter
    def name_expression(self, name_expression):
        """Sets the name_expression of this ObjectGroupRuleDto.


        :param name_expression: The name_expression of this ObjectGroupRuleDto.  # noqa: E501
        :type: str
        """

        self._name_expression = name_expression

    @property
    def object_type_id(self):
        """Gets the object_type_id of this ObjectGroupRuleDto.  # noqa: E501


        :return: The object_type_id of this ObjectGroupRuleDto.  # noqa: E501
        :rtype: int
        """
        return self._object_type_id

    @object_type_id.setter
    def object_type_id(self, object_type_id):
        """Sets the object_type_id of this ObjectGroupRuleDto.


        :param object_type_id: The object_type_id of this ObjectGroupRuleDto.  # noqa: E501
        :type: int
        """

        self._object_type_id = object_type_id

    @property
    def plugin_id(self):
        """Gets the plugin_id of this ObjectGroupRuleDto.  # noqa: E501


        :return: The plugin_id of this ObjectGroupRuleDto.  # noqa: E501
        :rtype: int
        """
        return self._plugin_id

    @plugin_id.setter
    def plugin_id(self, plugin_id):
        """Sets the plugin_id of this ObjectGroupRuleDto.


        :param plugin_id: The plugin_id of this ObjectGroupRuleDto.  # noqa: E501
        :type: int
        """

        self._plugin_id = plugin_id

    @property
    def subtype_id(self):
        """Gets the subtype_id of this ObjectGroupRuleDto.  # noqa: E501


        :return: The subtype_id of this ObjectGroupRuleDto.  # noqa: E501
        :rtype: int
        """
        return self._subtype_id

    @subtype_id.setter
    def subtype_id(self, subtype_id):
        """Sets the subtype_id of this ObjectGroupRuleDto.


        :param subtype_id: The subtype_id of this ObjectGroupRuleDto.  # noqa: E501
        :type: int
        """

        self._subtype_id = subtype_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ObjectGroupRuleDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ObjectGroupRuleDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
