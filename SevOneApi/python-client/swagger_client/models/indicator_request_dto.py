# coding: utf-8

"""
    SevOne API Documentation

    Supported endpoints by the new RESTful API  # noqa: E501

    OpenAPI spec version: 2.1.18, Hash: db562e6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class IndicatorRequestDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'evaluation_order': 'int',
        'format': 'str',
        'is_baselining': 'bool',
        'last_invalidation_time': 'int',
        'max_value': 'float',
        'plugin_indicator_type_id': 'int',
        'synthetic_expression': 'str',
        'system_max_value': 'float',
        'extended_info': 'dict(str, str)',
        'is_deleted': 'bool',
        'is_enabled': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'evaluation_order': 'evaluationOrder',
        'format': 'format',
        'is_baselining': 'isBaselining',
        'last_invalidation_time': 'lastInvalidationTime',
        'max_value': 'maxValue',
        'plugin_indicator_type_id': 'pluginIndicatorTypeId',
        'synthetic_expression': 'syntheticExpression',
        'system_max_value': 'systemMaxValue',
        'extended_info': 'extendedInfo',
        'is_deleted': 'isDeleted',
        'is_enabled': 'isEnabled'
    }

    def __init__(self, id=None, evaluation_order=None, format=None, is_baselining=None, last_invalidation_time=None, max_value=None, plugin_indicator_type_id=None, synthetic_expression=None, system_max_value=None, extended_info=None, is_deleted=None, is_enabled=None):  # noqa: E501
        """IndicatorRequestDto - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._evaluation_order = None
        self._format = None
        self._is_baselining = None
        self._last_invalidation_time = None
        self._max_value = None
        self._plugin_indicator_type_id = None
        self._synthetic_expression = None
        self._system_max_value = None
        self._extended_info = None
        self._is_deleted = None
        self._is_enabled = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if evaluation_order is not None:
            self.evaluation_order = evaluation_order
        if format is not None:
            self.format = format
        if is_baselining is not None:
            self.is_baselining = is_baselining
        if last_invalidation_time is not None:
            self.last_invalidation_time = last_invalidation_time
        if max_value is not None:
            self.max_value = max_value
        if plugin_indicator_type_id is not None:
            self.plugin_indicator_type_id = plugin_indicator_type_id
        if synthetic_expression is not None:
            self.synthetic_expression = synthetic_expression
        if system_max_value is not None:
            self.system_max_value = system_max_value
        if extended_info is not None:
            self.extended_info = extended_info
        if is_deleted is not None:
            self.is_deleted = is_deleted
        if is_enabled is not None:
            self.is_enabled = is_enabled

    @property
    def id(self):
        """Gets the id of this IndicatorRequestDto.  # noqa: E501


        :return: The id of this IndicatorRequestDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IndicatorRequestDto.


        :param id: The id of this IndicatorRequestDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def evaluation_order(self):
        """Gets the evaluation_order of this IndicatorRequestDto.  # noqa: E501


        :return: The evaluation_order of this IndicatorRequestDto.  # noqa: E501
        :rtype: int
        """
        return self._evaluation_order

    @evaluation_order.setter
    def evaluation_order(self, evaluation_order):
        """Sets the evaluation_order of this IndicatorRequestDto.


        :param evaluation_order: The evaluation_order of this IndicatorRequestDto.  # noqa: E501
        :type: int
        """

        self._evaluation_order = evaluation_order

    @property
    def format(self):
        """Gets the format of this IndicatorRequestDto.  # noqa: E501


        :return: The format of this IndicatorRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this IndicatorRequestDto.


        :param format: The format of this IndicatorRequestDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["GAUGE", "COUNTER32", "COUNTER64"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"  # noqa: E501
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def is_baselining(self):
        """Gets the is_baselining of this IndicatorRequestDto.  # noqa: E501


        :return: The is_baselining of this IndicatorRequestDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_baselining

    @is_baselining.setter
    def is_baselining(self, is_baselining):
        """Sets the is_baselining of this IndicatorRequestDto.


        :param is_baselining: The is_baselining of this IndicatorRequestDto.  # noqa: E501
        :type: bool
        """

        self._is_baselining = is_baselining

    @property
    def last_invalidation_time(self):
        """Gets the last_invalidation_time of this IndicatorRequestDto.  # noqa: E501

        Unix timestamp with milliseconds proximity  # noqa: E501

        :return: The last_invalidation_time of this IndicatorRequestDto.  # noqa: E501
        :rtype: int
        """
        return self._last_invalidation_time

    @last_invalidation_time.setter
    def last_invalidation_time(self, last_invalidation_time):
        """Sets the last_invalidation_time of this IndicatorRequestDto.

        Unix timestamp with milliseconds proximity  # noqa: E501

        :param last_invalidation_time: The last_invalidation_time of this IndicatorRequestDto.  # noqa: E501
        :type: int
        """

        self._last_invalidation_time = last_invalidation_time

    @property
    def max_value(self):
        """Gets the max_value of this IndicatorRequestDto.  # noqa: E501


        :return: The max_value of this IndicatorRequestDto.  # noqa: E501
        :rtype: float
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value):
        """Sets the max_value of this IndicatorRequestDto.


        :param max_value: The max_value of this IndicatorRequestDto.  # noqa: E501
        :type: float
        """

        self._max_value = max_value

    @property
    def plugin_indicator_type_id(self):
        """Gets the plugin_indicator_type_id of this IndicatorRequestDto.  # noqa: E501


        :return: The plugin_indicator_type_id of this IndicatorRequestDto.  # noqa: E501
        :rtype: int
        """
        return self._plugin_indicator_type_id

    @plugin_indicator_type_id.setter
    def plugin_indicator_type_id(self, plugin_indicator_type_id):
        """Sets the plugin_indicator_type_id of this IndicatorRequestDto.


        :param plugin_indicator_type_id: The plugin_indicator_type_id of this IndicatorRequestDto.  # noqa: E501
        :type: int
        """

        self._plugin_indicator_type_id = plugin_indicator_type_id

    @property
    def synthetic_expression(self):
        """Gets the synthetic_expression of this IndicatorRequestDto.  # noqa: E501


        :return: The synthetic_expression of this IndicatorRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._synthetic_expression

    @synthetic_expression.setter
    def synthetic_expression(self, synthetic_expression):
        """Sets the synthetic_expression of this IndicatorRequestDto.


        :param synthetic_expression: The synthetic_expression of this IndicatorRequestDto.  # noqa: E501
        :type: str
        """

        self._synthetic_expression = synthetic_expression

    @property
    def system_max_value(self):
        """Gets the system_max_value of this IndicatorRequestDto.  # noqa: E501


        :return: The system_max_value of this IndicatorRequestDto.  # noqa: E501
        :rtype: float
        """
        return self._system_max_value

    @system_max_value.setter
    def system_max_value(self, system_max_value):
        """Sets the system_max_value of this IndicatorRequestDto.


        :param system_max_value: The system_max_value of this IndicatorRequestDto.  # noqa: E501
        :type: float
        """

        self._system_max_value = system_max_value

    @property
    def extended_info(self):
        """Gets the extended_info of this IndicatorRequestDto.  # noqa: E501


        :return: The extended_info of this IndicatorRequestDto.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._extended_info

    @extended_info.setter
    def extended_info(self, extended_info):
        """Sets the extended_info of this IndicatorRequestDto.


        :param extended_info: The extended_info of this IndicatorRequestDto.  # noqa: E501
        :type: dict(str, str)
        """

        self._extended_info = extended_info

    @property
    def is_deleted(self):
        """Gets the is_deleted of this IndicatorRequestDto.  # noqa: E501

        false  # noqa: E501

        :return: The is_deleted of this IndicatorRequestDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted):
        """Sets the is_deleted of this IndicatorRequestDto.

        false  # noqa: E501

        :param is_deleted: The is_deleted of this IndicatorRequestDto.  # noqa: E501
        :type: bool
        """

        self._is_deleted = is_deleted

    @property
    def is_enabled(self):
        """Gets the is_enabled of this IndicatorRequestDto.  # noqa: E501


        :return: The is_enabled of this IndicatorRequestDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this IndicatorRequestDto.


        :param is_enabled: The is_enabled of this IndicatorRequestDto.  # noqa: E501
        :type: bool
        """

        self._is_enabled = is_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IndicatorRequestDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IndicatorRequestDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
