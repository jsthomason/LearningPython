# coding: utf-8

"""
    SevOne API Documentation

    Supported endpoints by the new RESTful API  # noqa: E501

    OpenAPI spec version: 2.1.18, Hash: db562e6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TopNViewDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'common': 'bool',
        'custom': 'bool',
        'direction': 'str',
        'id': 'int',
        'name': 'str',
        'order_number': 'int'
    }

    attribute_map = {
        'common': 'common',
        'custom': 'custom',
        'direction': 'direction',
        'id': 'id',
        'name': 'name',
        'order_number': 'orderNumber'
    }

    def __init__(self, common=None, custom=None, direction=None, id=None, name=None, order_number=None):  # noqa: E501
        """TopNViewDto - a model defined in Swagger"""  # noqa: E501

        self._common = None
        self._custom = None
        self._direction = None
        self._id = None
        self._name = None
        self._order_number = None
        self.discriminator = None

        if common is not None:
            self.common = common
        if custom is not None:
            self.custom = custom
        if direction is not None:
            self.direction = direction
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if order_number is not None:
            self.order_number = order_number

    @property
    def common(self):
        """Gets the common of this TopNViewDto.  # noqa: E501


        :return: The common of this TopNViewDto.  # noqa: E501
        :rtype: bool
        """
        return self._common

    @common.setter
    def common(self, common):
        """Sets the common of this TopNViewDto.


        :param common: The common of this TopNViewDto.  # noqa: E501
        :type: bool
        """

        self._common = common

    @property
    def custom(self):
        """Gets the custom of this TopNViewDto.  # noqa: E501


        :return: The custom of this TopNViewDto.  # noqa: E501
        :rtype: bool
        """
        return self._custom

    @custom.setter
    def custom(self, custom):
        """Sets the custom of this TopNViewDto.


        :param custom: The custom of this TopNViewDto.  # noqa: E501
        :type: bool
        """

        self._custom = custom

    @property
    def direction(self):
        """Gets the direction of this TopNViewDto.  # noqa: E501


        :return: The direction of this TopNViewDto.  # noqa: E501
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this TopNViewDto.


        :param direction: The direction of this TopNViewDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["DESC", "ASC"]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"  # noqa: E501
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def id(self):
        """Gets the id of this TopNViewDto.  # noqa: E501


        :return: The id of this TopNViewDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TopNViewDto.


        :param id: The id of this TopNViewDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this TopNViewDto.  # noqa: E501


        :return: The name of this TopNViewDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TopNViewDto.


        :param name: The name of this TopNViewDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def order_number(self):
        """Gets the order_number of this TopNViewDto.  # noqa: E501


        :return: The order_number of this TopNViewDto.  # noqa: E501
        :rtype: int
        """
        return self._order_number

    @order_number.setter
    def order_number(self, order_number):
        """Sets the order_number of this TopNViewDto.


        :param order_number: The order_number of this TopNViewDto.  # noqa: E501
        :type: int
        """

        self._order_number = order_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TopNViewDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TopNViewDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
