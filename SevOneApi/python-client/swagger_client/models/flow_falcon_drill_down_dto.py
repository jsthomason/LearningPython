# coding: utf-8

"""
    SevOne API Documentation

    Supported endpoints by the new RESTful API  # noqa: E501

    OpenAPI spec version: 2.1.18, Hash: db562e6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.flow_falcon_view import FlowFalconView  # noqa: F401,E501


class FlowFalconDrillDownDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'drill_down': 'list[int]',
        'fan_out': 'list[int]',
        'members': 'dict(str, FlowFalconView)'
    }

    attribute_map = {
        'drill_down': 'drillDown',
        'fan_out': 'fanOut',
        'members': 'members'
    }

    def __init__(self, drill_down=None, fan_out=None, members=None):  # noqa: E501
        """FlowFalconDrillDownDto - a model defined in Swagger"""  # noqa: E501

        self._drill_down = None
        self._fan_out = None
        self._members = None
        self.discriminator = None

        if drill_down is not None:
            self.drill_down = drill_down
        if fan_out is not None:
            self.fan_out = fan_out
        if members is not None:
            self.members = members

    @property
    def drill_down(self):
        """Gets the drill_down of this FlowFalconDrillDownDto.  # noqa: E501


        :return: The drill_down of this FlowFalconDrillDownDto.  # noqa: E501
        :rtype: list[int]
        """
        return self._drill_down

    @drill_down.setter
    def drill_down(self, drill_down):
        """Sets the drill_down of this FlowFalconDrillDownDto.


        :param drill_down: The drill_down of this FlowFalconDrillDownDto.  # noqa: E501
        :type: list[int]
        """

        self._drill_down = drill_down

    @property
    def fan_out(self):
        """Gets the fan_out of this FlowFalconDrillDownDto.  # noqa: E501


        :return: The fan_out of this FlowFalconDrillDownDto.  # noqa: E501
        :rtype: list[int]
        """
        return self._fan_out

    @fan_out.setter
    def fan_out(self, fan_out):
        """Sets the fan_out of this FlowFalconDrillDownDto.


        :param fan_out: The fan_out of this FlowFalconDrillDownDto.  # noqa: E501
        :type: list[int]
        """

        self._fan_out = fan_out

    @property
    def members(self):
        """Gets the members of this FlowFalconDrillDownDto.  # noqa: E501


        :return: The members of this FlowFalconDrillDownDto.  # noqa: E501
        :rtype: dict(str, FlowFalconView)
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this FlowFalconDrillDownDto.


        :param members: The members of this FlowFalconDrillDownDto.  # noqa: E501
        :type: dict(str, FlowFalconView)
        """

        self._members = members

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FlowFalconDrillDownDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FlowFalconDrillDownDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
